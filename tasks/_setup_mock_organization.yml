---

# Copyright 2016 David Stanek <dstanek@dstanek.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Get the 'admins' group
  os_group:
    cloud: "{{ admin_os_cloud }}"
    state: present
    name: admins
  register: admins

- name: Ensure the 'Member' role exists
  os_keystone_role:
    cloud: "{{ admin_os_cloud }}"
    state: present
    name: Member
  register: member

- name: Ensure the 'finance' domain exists
  os_keystone_domain:
    cloud: "{{ admin_os_cloud }}"
    state: present
    name: finance
  register: finance

- name: Ensure the 'finance_admins' group exists
  os_group:
    cloud: "{{ admin_os_cloud }}"
    state: present
    name: finance_admins
  register: finance_admins

- name: Ensure the 'accountant' group exists
  os_group:
    cloud: "{{ admin_os_cloud }}"
    state: present
    name: accountant
  register: accountant

- name: Ensure the 'accounting' project exists
  os_project:
    cloud: "{{ admin_os_cloud }}"
    state: present
    name: accounting
    domain_id: "{{ finance['domain']['id'] }}"
  register: accounting

# FIXME(dstanek): right now this doesn't seem to work and i have to do in manually
#- name: Ensure the 'finance_admins' group has the 'admin' role on 'finance'
#  os_user_role:
#    cloud: "{{ admin_os_cloud }}"
#    state: present
#    group: "{{ finance_admins['group']['id'] }}"
#    role: admin
#    domain: "{{ finance['domain']['id'] }}"
##    role: "{{ admin['role']['id'] }}"

- name: Ensure the 'accountant' group has the 'member' role on 'accounting'
  os_user_role:
    cloud: "{{ admin_os_cloud }}"
    state: present
    group: "{{ accountant['group']['id'] }}"
    role: "{{ member['role']['id'] }}"
    project: "{{ accounting['project']['id'] }}"

# TODO(dstanek): without this the domain admin cannot actually login
- name: Ensure the 'finance_admins' group has the 'member' role on 'accounting'
  os_user_role:
    cloud: "{{ admin_os_cloud }}"
    state: present
    group: "{{ finance_admins['group']['id'] }}"
    role: "{{ member['role']['id'] }}"
    project: "{{ accounting['project']['id'] }}"

- name: Ensure IdP entries exist
  command: |
    openstack --os-cloud {{ admin_os_cloud }}
      identity provider create
      --remote-id={{ item.remote_id }}
      {{ item.name }}
#      --remote-id=http://{{ hostvars[item]['ansible_host'] }}:35357/v3/OS-FEDERATION/saml2/idp
#      {{ hostvars[item]['ansible_hostname'] }}
#  with_items: "{{ groups[keystone_idp_group] }}"
  with_items: "{{ keystone_sp_idps }}"
  register: idps
  failed_when: >
    idps.rc != 0 and ('(HTTP 409)' not in idps.stderr)
  changed_when: idps.rc == 0

- name: Get a list of IdPs
  command: |
    openstack --os-cloud {{ admin_os_cloud }}
      identity provider list -f json
  register: idps
  changed_when: False

- set_fact:
    idps: "{{ idps.stdout|from_json }}"

# Add mapping rules
# TODO(dstanek): this is stupid, there must be a better way
# NOTE(dstanek): once created the mapping won't be updated
- name: Check to see if the mapping exists
  command: |
    openstack --os-cloud {{ admin_os_cloud }}
      mapping show keystone-idp-mapping -f json
  register: has_mapping
  ignore_errors: True
  changed_when: False
- name: Create a temp file for the mapping.json
  command: mktemp /tmp/ansible.mapping.json.XXXXXXXX
  register: temp_mapping_json
  when: "{{ has_mapping|failed }}"
- name: Create the mapping.json file
  template:
    src: mapping.json.j2
    dest: "{{ temp_mapping_json.stdout }}"
  when: "{{ has_mapping|failed }}"
- name: Create the mapping
  command: |
    openstack --os-cloud {{ admin_os_cloud }}
      mapping create
      --rules={{ temp_mapping_json.stdout }}
      keystone-idp-mapping
  when: "{{ has_mapping|failed }}"
- name: Get the mapping recored to be used later
  command: |
    openstack --os-cloud {{ admin_os_cloud }}
      mapping show keystone-idp-mapping -f json
  register: mapping
  changed_when: False
- debug: var=mapping
- set_fact:
    mapping: "{{ mapping.stdout|from_json }}"
# end of stupid

- name: Ensure saml2 protocol exists
  command: |
    openstack --os-cloud {{ admin_os_cloud }}
      federation protocol create
      -f json
      --identity-provider {{ item.ID }}
      --mapping {{ mapping.id }}
      saml2
  with_items: " {{ idps }}"
  register: result
  failed_when: >
    result.rc != 0 and ('(HTTP 409)' not in result.stderr)
  changed_when: result.rc == 0

# vim: set foldmethod=marker foldmarker=[[[,]]]:
